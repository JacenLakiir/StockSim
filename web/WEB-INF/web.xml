<?xml version="1.0" encoding="ISO-8859-1"?>

<!-- This file is based on examples provided by Apache:
     http://tomcat.apache.org/tomcat-6.0-doc/appdev/web.xml.txt
     http://tomcat.apache.org/tomcat-6.0-doc/appdev/sample/sample.war -->

<web-app xmlns="http://java.sun.com/xml/ns/j2ee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"
         version="2.4">

  <!-- ==================== General Description ==================== -->

  <display-name>StockSim Application</display-name>
  <description>
    Virtual Portfolio Management
  </description>

  <!-- ==================== Context Initialization Parameters ==================== -->
  <!-- Context initialization parameters that define shared
       String constants used within your application, which
       can be customized by the system administrator who is
       installing your application.  The values actually
       assigned to these parameters can be retrieved in a
       servlet or JSP page by calling:
           String value =
             getServletContext().getInitParameter("name");
       where "name" matches the <param-name> element of
       one of these initialization parameters.

       You can define any number of context initialization
       parameters, including zero.
  -->
  <!--
  <context-param>
    <param-name>webmaster</param-name>
    <param-value>myaddress@mycompany.com</param-value>
    <description>
      The EMAIL address of the administrator to whom questions
      and comments about this application should be addressed.
    </description>
  </context-param>
  -->

  <!-- ==================== Listener Definitions ==================== -->
  <!-- Define your listeners, if any.  For example, when the servlet
       context is initialized, a listener can create a database
       connection object and put it inside the servlet context for use
       by all servlets within the context.
  -->
  <listener>
    <listener-class>listener.SessionListener</listener-class>
  </listener>

  <!-- ==================== Servlet Definitions ==================== -->
  <!-- Servlet definitions for the servlets that make up
       your web application, including initialization
       parameters.  With Tomcat, you can also send requests
       to servlets not listed here with a request like this:
         http://localhost:8080/{context-path}/servlet/{classname}
       but this usage is not guaranteed to be portable.  It also
       makes relative references to images and other resources
       required by your servlet more complicated, so defining
       all of your servlets (and defining a mapping to them with
       a servlet-mapping element) is recommended.

       Servlet initialization parameters can be retrieved in a
       servlet or JSP page by calling:
           String value =
             getServletConfig().getInitParameter("name");
       where "name" matches the <param-name> element of
       one of these initialization parameters.

       You can define any number of servlets, including zero.
  -->
  
  <!--
  <servlet>
    <servlet-name>NAME</servlet-name>
    <description>
      DESCRIPTION
    </description>
    <servlet-class>RELFILEPATH</servlet-class>
    <init-param>
      <param-name>PARAMETER1</param-name>
      <param-value>VALUE1</param-value>
    </init-param>
    <init-param>
      <param-name>PARAMETER2</param-name>
      <param-value>VALUE2</param-value>
    </init-param>
  -->
    <!-- Load this servlet at server startup time -->
  <!--
    <load-on-startup>5</load-on-startup>
  </servlet>
  -->
  
  <!-- ==================== Servlet Mapping Definitions ==================== -->
  <!-- Define mappings that are used by the servlet container to
       translate a particular request URI (context-relative) to a
       particular servlet.  The examples below correspond to the
       servlet descriptions above.  Thus, a request URI like:
         http://localhost:8080/{contextpath}/graph
       will be mapped to the "graph" servlet, while a request like:
         http://localhost:8080/{contextpath}/saveCustomer.do
       will be mapped to the "controller" servlet.

       You may define any number of servlet mappings, including zero.
       It is also legal to define more than one mapping for the same
       servlet, if you wish to.
  -->
  
  <!--
  <servlet-mapping>
    <servlet-name>NAME</servlet-name>
    <url-pattern>/NAME</url-pattern>
  </servlet-mapping>
  -->

  <!-- ==================== Session Configuration ==================== -->
    <!-- Define the default session timeout for your application,
         in minutes.  From a servlet or JSP page, you can modify
         the timeout for a particular session dynamically by using
         HttpSession.getMaxInactiveInterval().
    -->
  <session-config>
    <session-timeout>30</session-timeout>
  </session-config>

</web-app>
